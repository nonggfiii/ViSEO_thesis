# from flask import request, render_template, jsonify
# import pandas as pd
# import logging
# from pymongo import MongoClient
# from src.config.global_settings import MONGO_URI
# from src.data_collection_new import run_pipeline
# from src.data_indexing_new import process_and_index_data

# # Logging configuration
# logging.basicConfig(level=logging.INFO)

# # K·∫øt n·ªëi MongoDB
# try:
#     client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
#     db = client["eval_database"]
#     collection = db["test_collection"]
#     indexed_collection = db["indexed_data_openai_text3"]
#     print("K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
# except Exception as e:
#     print(f"K·∫øt n·ªëi MongoDB th·∫•t b·∫°i: {e}")

# async def upload_file(request):
#     if request.method == "POST":
#         if "file" not in request.files:
#             logging.error("No file part")
#             return jsonify({"error": "No file part"}), 400
        
#         file = request.files["file"]
#         if file.filename == "":
#             logging.error("No selected file")
#             return jsonify({"error": "No selected file"}), 400

#         if file:
#             try:
#                 # ƒê·ªçc file Excel v√† chuy·ªÉn th√†nh JSON
#                 logging.info("ƒêang ƒë·ªçc file Excel...")
#                 df = pd.read_excel(file)
#                 data = df.to_dict(orient="records")
#                 logging.info(f"ƒê·ªçc th√†nh c√¥ng {len(data)} b·∫£n ghi t·ª´ file Excel.")

#                 # Chuy·ªÉn ƒë·ªïi key "T√™n s·∫£n ph·∫©m" th√†nh "product_name"
#                 for item in data:
#                     product_name = item.get("T√™n s·∫£n ph·∫©m")
#                     if not product_name:
#                         logging.warning("Kh√¥ng c√≥ t√™n s·∫£n ph·∫©m, b·ªè qua.")
#                         continue
#                     item["product_name"] = product_name  # Chu·∫©n h√≥a key

#                     # L∆∞u v√†o MongoDB n·∫øu ch∆∞a t·ªìn t·∫°i
#                     if not collection.find_one({"product_name": product_name}):
#                         collection.insert_one(item)
#                         logging.info(f"ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi: {product_name}")
#                     else:
#                         logging.info(f"S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i: {product_name}")

#                 logging.info("ƒê√£ l∆∞u d·ªØ li·ªáu g·ªëc v√†o MongoDB.")

#                 # G·ªçi pipeline ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
#                 enriched_data = []
#                 for item in data:
#                     product_name = item.get("product_name")  # D√πng key m·ªõi
#                     if not product_name:
#                         continue

#                     # **G·ªçi `run_pipeline()` l·∫•y content_topics v√† product_report**
#                     result = await run_pipeline(product_name)

#                     # **H·ª£p nh·∫•t k·∫øt qu·∫£ v√†o item**
#                     item["content_topics"] = result.get("content_topics", [])
#                     item["product_report"] = result.get("product_report", "")

#                     enriched_data.append(item)

#                 # **G·ªçi `process_and_index_data()` v·ªõi enriched_data**
#                 logging.info("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω chunking, embedding v√† indexing...")
#                 indexed_data = process_and_index_data(enriched_data)

#                 # **L∆∞u d·ªØ li·ªáu ƒë√£ index v√†o MongoDB**
#                 if indexed_data:
#                     logging.info(f"L∆∞u {len(indexed_data)} m·ª•c d·ªØ li·ªáu v√†o indexed_collection.")
#                     indexed_collection.insert_many(indexed_data)
#                     logging.info("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o indexed_collection.")
#                 else:
#                     logging.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ index.")

#                 return jsonify({"message": "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† l∆∞u v√†o MongoDB."}), 200

#             except Exception as e:
#                 logging.error(f"L·ªói khi x·ª≠ l√Ω file Excel: {e}")
#                 return jsonify({"error": f"L·ªói khi x·ª≠ l√Ω file Excel: {e}"}), 500

#     return render_template("index.html")

from flask import request, render_template, jsonify
import pandas as pd
import logging
from pymongo import MongoClient
from src.config.global_settings import MONGO_URI
from src.data_collection_new import run_pipeline
from src.data_indexing_new import process_and_index_data

# Logging configuration
logging.basicConfig(level=logging.INFO)

# K·∫øt n·ªëi MongoDB
try:
    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
    db = client["eval_database"]
    collection = db["test_collection"]
    indexed_collection = db["indexed_data_openai_text3"]
    print("K·∫øt n·ªëi MongoDB th√†nh c√¥ng!")
except Exception as e:
    print(f"K·∫øt n·ªëi MongoDB th·∫•t b·∫°i: {e}")

async def upload_file(request):
    if request.method == "POST":
        if "file" not in request.files:
            logging.error("No file part")
            return jsonify({"error": "No file part"}), 400
        
        file = request.files["file"]
        if file.filename == "":
            logging.error("No selected file")
            return jsonify({"error": "No selected file"}), 400

        if file:
            try:
                # ƒê·ªçc file Excel v√† chuy·ªÉn th√†nh JSON
                logging.info("üìå ƒêang ƒë·ªçc file Excel...")
                df = pd.read_excel(file)
                data = df.to_dict(orient="records")
                logging.info(f"‚úÖ ƒê·ªçc th√†nh c√¥ng {len(data)} b·∫£n ghi t·ª´ file Excel.")

                # Chuy·ªÉn ƒë·ªïi key "T√™n s·∫£n ph·∫©m" th√†nh "product_name"
                for item in data:
                    product_name = item.get("T√™n s·∫£n ph·∫©m")
                    if not product_name:
                        logging.warning("‚ö†Ô∏è Kh√¥ng c√≥ t√™n s·∫£n ph·∫©m, b·ªè qua.")
                        continue
                    item["product_name"] = product_name  # Chu·∫©n h√≥a key

                    # L∆∞u v√†o MongoDB n·∫øu ch∆∞a t·ªìn t·∫°i
                    if not collection.find_one({"product_name": product_name}):
                        collection.insert_one(item)
                        logging.info(f"üü¢ ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi v√†o MongoDB: {product_name}")
                    else:
                        logging.info(f"üîπ S·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i: {product_name}")

                logging.info("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu g·ªëc v√†o MongoDB.")

                # G·ªçi pipeline ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu
                enriched_data = []
                for item in data:
                    product_name = item.get("product_name")  # D√πng key m·ªõi
                    if not product_name:
                        continue

                    # **G·ªçi `run_pipeline()` l·∫•y content_topics v√† product_report**
                    logging.info(f"\nüîé **ƒêang ch·∫°y pipeline cho s·∫£n ph·∫©m:** {product_name}")
                    result = await run_pipeline(product_name)

                    # **In k·∫øt qu·∫£ t·ª´ng b∆∞·ªõc**
                    print("\nüìå **K·∫øt qu·∫£ Pipeline:**")
                    print(f"üîπ **T√™n s·∫£n ph·∫©m:** {product_name}")
                    print(f"üîπ **Content Topics:** {result.get('content_topics', [])}")
                    print(f"üîπ **Product Report:** {result.get('product_report', 'N/A')}")
                    print(f"üîπ **Categorized Keywords:** {result.get('categorized_keywords', {})}\n")

                    logging.info(f"‚úÖ Pipeline ho√†n th√†nh cho s·∫£n ph·∫©m: {product_name}")

                    # **H·ª£p nh·∫•t k·∫øt qu·∫£ v√†o item**
                    item["content_topics"] = result.get("content_topics", [])
                    item["product_report"] = result.get("product_report", "")

                    enriched_data.append(item)

                # **G·ªçi `process_and_index_data()` v·ªõi enriched_data**
                logging.info("\nüöÄ **B·∫Øt ƒë·∫ßu x·ª≠ l√Ω chunking, embedding v√† indexing...**")
                indexed_data = process_and_index_data(enriched_data)

                # **L∆∞u d·ªØ li·ªáu ƒë√£ index v√†o MongoDB**
                if indexed_data:
                    logging.info(f"‚úÖ ƒê√£ index {len(indexed_data)} m·ª•c d·ªØ li·ªáu v√†o MongoDB.")
                    indexed_collection.insert_many(indexed_data)
                else:
                    logging.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ index.")

                return jsonify({"message": "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† l∆∞u v√†o MongoDB."}), 200

            except Exception as e:
                logging.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file Excel: {e}")
                return jsonify({"error": f"L·ªói khi x·ª≠ l√Ω file Excel: {e}"}), 500

    return render_template("index.html")
